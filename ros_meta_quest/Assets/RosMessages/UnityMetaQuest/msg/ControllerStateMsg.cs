//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.UnityMetaQuest
{
    [Serializable]
    public class ControllerStateMsg : Message
    {
        public const string k_RosMessageName = "unity_meta_quest_msgs/ControllerState";
        public override string RosMessageName => k_RosMessageName;

        //  ControllerState.msg
        //  This message holds the state of the buttons and thumbstick on the left XR controller.
        //  Thumbstick values are usually represented as a 2D vector with x and y components.
        public float thumbstick_x;
        public float thumbstick_y;
        //  Buttons can be represented as booleans, where true means pressed, and false means not pressed.
        public bool trigger_pressed;
        public bool grip_pressed;
        public bool primary_button_pressed;
        public bool secondary_button_pressed;

        public ControllerStateMsg()
        {
            this.thumbstick_x = 0.0f;
            this.thumbstick_y = 0.0f;
            this.trigger_pressed = false;
            this.grip_pressed = false;
            this.primary_button_pressed = false;
            this.secondary_button_pressed = false;
        }

        public ControllerStateMsg(float thumbstick_x, float thumbstick_y, bool trigger_pressed, bool grip_pressed, bool primary_button_pressed, bool secondary_button_pressed)
        {
            this.thumbstick_x = thumbstick_x;
            this.thumbstick_y = thumbstick_y;
            this.trigger_pressed = trigger_pressed;
            this.grip_pressed = grip_pressed;
            this.primary_button_pressed = primary_button_pressed;
            this.secondary_button_pressed = secondary_button_pressed;
        }

        public static ControllerStateMsg Deserialize(MessageDeserializer deserializer) => new ControllerStateMsg(deserializer);

        private ControllerStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.thumbstick_x);
            deserializer.Read(out this.thumbstick_y);
            deserializer.Read(out this.trigger_pressed);
            deserializer.Read(out this.grip_pressed);
            deserializer.Read(out this.primary_button_pressed);
            deserializer.Read(out this.secondary_button_pressed);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.thumbstick_x);
            serializer.Write(this.thumbstick_y);
            serializer.Write(this.trigger_pressed);
            serializer.Write(this.grip_pressed);
            serializer.Write(this.primary_button_pressed);
            serializer.Write(this.secondary_button_pressed);
        }

        public override string ToString()
        {
            return "ControllerStateMsg: " +
            "\nthumbstick_x: " + thumbstick_x.ToString() +
            "\nthumbstick_y: " + thumbstick_y.ToString() +
            "\ntrigger_pressed: " + trigger_pressed.ToString() +
            "\ngrip_pressed: " + grip_pressed.ToString() +
            "\nprimary_button_pressed: " + primary_button_pressed.ToString() +
            "\nsecondary_button_pressed: " + secondary_button_pressed.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
