// Generated by gencpp from file unity_meta_quest_msgs/ControllerState.msg
// DO NOT EDIT!


#ifndef UNITY_META_QUEST_MSGS_MESSAGE_CONTROLLERSTATE_H
#define UNITY_META_QUEST_MSGS_MESSAGE_CONTROLLERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_meta_quest_msgs
{
template <class ContainerAllocator>
struct ControllerState_
{
  typedef ControllerState_<ContainerAllocator> Type;

  ControllerState_()
    : thumbstick_x(0.0)
    , thumbstick_y(0.0)
    , trigger_pressed(false)
    , grip_pressed(false)
    , primary_button_pressed(false)
    , secondary_button_pressed(false)  {
    }
  ControllerState_(const ContainerAllocator& _alloc)
    : thumbstick_x(0.0)
    , thumbstick_y(0.0)
    , trigger_pressed(false)
    , grip_pressed(false)
    , primary_button_pressed(false)
    , secondary_button_pressed(false)  {
  (void)_alloc;
    }



   typedef float _thumbstick_x_type;
  _thumbstick_x_type thumbstick_x;

   typedef float _thumbstick_y_type;
  _thumbstick_y_type thumbstick_y;

   typedef uint8_t _trigger_pressed_type;
  _trigger_pressed_type trigger_pressed;

   typedef uint8_t _grip_pressed_type;
  _grip_pressed_type grip_pressed;

   typedef uint8_t _primary_button_pressed_type;
  _primary_button_pressed_type primary_button_pressed;

   typedef uint8_t _secondary_button_pressed_type;
  _secondary_button_pressed_type secondary_button_pressed;





  typedef boost::shared_ptr< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerState_

typedef ::unity_meta_quest_msgs::ControllerState_<std::allocator<void> > ControllerState;

typedef boost::shared_ptr< ::unity_meta_quest_msgs::ControllerState > ControllerStatePtr;
typedef boost::shared_ptr< ::unity_meta_quest_msgs::ControllerState const> ControllerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return lhs.thumbstick_x == rhs.thumbstick_x &&
    lhs.thumbstick_y == rhs.thumbstick_y &&
    lhs.trigger_pressed == rhs.trigger_pressed &&
    lhs.grip_pressed == rhs.grip_pressed &&
    lhs.primary_button_pressed == rhs.primary_button_pressed &&
    lhs.secondary_button_pressed == rhs.secondary_button_pressed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unity_meta_quest_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13c77d47a3ccdc5ae9cfb2e89658444a";
  }

  static const char* value(const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13c77d47a3ccdc5aULL;
  static const uint64_t static_value2 = 0xe9cfb2e89658444aULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_meta_quest_msgs/ControllerState";
  }

  static const char* value(const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ControllerState.msg\n"
"# This message holds the state of the buttons and thumbstick on the left XR controller.\n"
"\n"
"# Thumbstick values are usually represented as a 2D vector with x and y components.\n"
"float32 thumbstick_x\n"
"float32 thumbstick_y\n"
"\n"
"# Buttons can be represented as booleans, where true means pressed, and false means not pressed.\n"
"bool trigger_pressed\n"
"bool grip_pressed\n"
"bool primary_button_pressed\n"
"bool secondary_button_pressed\n"
;
  }

  static const char* value(const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thumbstick_x);
      stream.next(m.thumbstick_y);
      stream.next(m.trigger_pressed);
      stream.next(m.grip_pressed);
      stream.next(m.primary_button_pressed);
      stream.next(m.secondary_button_pressed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_meta_quest_msgs::ControllerState_<ContainerAllocator>& v)
  {
    s << indent << "thumbstick_x: ";
    Printer<float>::stream(s, indent + "  ", v.thumbstick_x);
    s << indent << "thumbstick_y: ";
    Printer<float>::stream(s, indent + "  ", v.thumbstick_y);
    s << indent << "trigger_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_pressed);
    s << indent << "grip_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grip_pressed);
    s << indent << "primary_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.primary_button_pressed);
    s << indent << "secondary_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.secondary_button_pressed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_META_QUEST_MSGS_MESSAGE_CONTROLLERSTATE_H
