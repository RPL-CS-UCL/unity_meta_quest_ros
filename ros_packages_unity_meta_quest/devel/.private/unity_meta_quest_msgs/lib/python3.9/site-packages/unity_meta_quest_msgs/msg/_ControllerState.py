# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_meta_quest_msgs/ControllerState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControllerState(genpy.Message):
  _md5sum = "13c77d47a3ccdc5ae9cfb2e89658444a"
  _type = "unity_meta_quest_msgs/ControllerState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ControllerState.msg
# This message holds the state of the buttons and thumbstick on the left XR controller.

# Thumbstick values are usually represented as a 2D vector with x and y components.
float32 thumbstick_x
float32 thumbstick_y

# Buttons can be represented as booleans, where true means pressed, and false means not pressed.
bool trigger_pressed
bool grip_pressed
bool primary_button_pressed
bool secondary_button_pressed"""
  __slots__ = ['thumbstick_x','thumbstick_y','trigger_pressed','grip_pressed','primary_button_pressed','secondary_button_pressed']
  _slot_types = ['float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       thumbstick_x,thumbstick_y,trigger_pressed,grip_pressed,primary_button_pressed,secondary_button_pressed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.thumbstick_x is None:
        self.thumbstick_x = 0.
      if self.thumbstick_y is None:
        self.thumbstick_y = 0.
      if self.trigger_pressed is None:
        self.trigger_pressed = False
      if self.grip_pressed is None:
        self.grip_pressed = False
      if self.primary_button_pressed is None:
        self.primary_button_pressed = False
      if self.secondary_button_pressed is None:
        self.secondary_button_pressed = False
    else:
      self.thumbstick_x = 0.
      self.thumbstick_y = 0.
      self.trigger_pressed = False
      self.grip_pressed = False
      self.primary_button_pressed = False
      self.secondary_button_pressed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.thumbstick_x, _x.thumbstick_y, _x.trigger_pressed, _x.grip_pressed, _x.primary_button_pressed, _x.secondary_button_pressed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.thumbstick_x, _x.thumbstick_y, _x.trigger_pressed, _x.grip_pressed, _x.primary_button_pressed, _x.secondary_button_pressed,) = _get_struct_2f4B().unpack(str[start:end])
      self.trigger_pressed = bool(self.trigger_pressed)
      self.grip_pressed = bool(self.grip_pressed)
      self.primary_button_pressed = bool(self.primary_button_pressed)
      self.secondary_button_pressed = bool(self.secondary_button_pressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.thumbstick_x, _x.thumbstick_y, _x.trigger_pressed, _x.grip_pressed, _x.primary_button_pressed, _x.secondary_button_pressed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.thumbstick_x, _x.thumbstick_y, _x.trigger_pressed, _x.grip_pressed, _x.primary_button_pressed, _x.secondary_button_pressed,) = _get_struct_2f4B().unpack(str[start:end])
      self.trigger_pressed = bool(self.trigger_pressed)
      self.grip_pressed = bool(self.grip_pressed)
      self.primary_button_pressed = bool(self.primary_button_pressed)
      self.secondary_button_pressed = bool(self.secondary_button_pressed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4B = None
def _get_struct_2f4B():
    global _struct_2f4B
    if _struct_2f4B is None:
        _struct_2f4B = struct.Struct("<2f4B")
    return _struct_2f4B
